魔法学院MUD游戏技术实现方案

一、客户端实现 (本仓库)

1. 技术栈
- 框架: Next.js + React 
- 样式: TailwindCSS
- 状态管理: Zustand
- WebSocket: socket.io-client
- UI组件: shadcn/ui
- 动画: Framer Motion
- 图标: Lucide Icons

2. 目录结构
/src
  /components      # UI组件
  /hooks          # 自定义hooks
  /lib            # 工具函数
  /stores         # 状态管理
  /types          # TypeScript类型定义
  /pages          # 页面
  /styles         # 全局样式
  /constants      # 常量定义
  /services       # API服务
  /socket         # WebSocket相关
  /assets         # 静态资源

3. 核心组件设计

3.1 GameMap组件
- 使用CSS Grid实现2:3比例的地图格子
- 支持动态加载地图数据
- 实现角色和NPC的位置渲染
- 支持简单动画效果

3.2 InteractionPanel组件 
- 动态显示可用的交互按钮
- 使用Grid布局组织按钮
- 支持快捷键绑定
- 实现按钮状态管理

3.3 ChatWindow组件
- 支持多个聊天频道
- 消息历史记录管理
- 自动滚动到最新消息
- 支持表情和简单的富文本

3.4 PlayerInfo组件
- 显示角色基本信息
- 状态条动画效果
- 状态图标管理
- 经验值进度展示

4. 状态管理设计

4.1 游戏核心状态
- 玩家信息store
- 地图数据store  
- 聊天记录store
- UI状态store

4.2 状态更新流程
- WebSocket消息触发状态更新
- 用户操作触发状态更新
- 状态变化通知相关组件重渲染

5. 网络通信实现

5.1 Socket连接管理
- 自动重连机制
- 心跳检测
- 断线重连后的状态恢复

5.2 消息处理
- 消息队列
- 消息去重
- 错误重试
- 超时处理

二、服务器通信协议 (与服务器端约定)

1. WebSocket消息格式

1.1 基础消息结构
{
  type: string,      // 消息类型
  data: any,         // 消息数据
  timestamp: number, // 时间戳
  msgId: string     // 消息ID
}

1.2 主要消息类型

玩家操作类:
MOVE           // 移动
INTERACT       // 交互
CHAT           // 聊天
USE_ITEM       // 使用物品
SKILL          // 使用技能

游戏状态类:
PLAYER_UPDATE  // 玩家状态更新  
MAP_UPDATE     // 地图更新
CHAT_MESSAGE   // 聊天消息
SYSTEM_MESSAGE // 系统消息

2. REST API接口

2.1 认证相关
POST /api/auth/login    // 登录
POST /api/auth/logout   // 登出
GET  /api/auth/status   // 获取登录状态

2.2 游戏数据
GET  /api/player/info   // 获取玩家信息
GET  /api/map/data      // 获取地图数据
GET  /api/items         // 获取物品列表

3. 错误处理

3.1 错误码定义
1000: 一般错误
2000: 认证错误
3000: 权限错误
4000: 参数错误
5000: 服务器错误

3.2 错误消息格式
{
  code: number,    // 错误码
  message: string, // 错误描述
  details?: any    // 详细信息
}

4. 安全措施

4.1 通信加密
- 使用WSS安全连接
- 关键数据加密传输
- Token认证

4.2 防作弊
- 服务器端验证
- 操作频率限制
- 数据一致性检查

三、开发规范

1. 代码规范
- 使用ESLint + Prettier
- 遵循TypeScript严格模式
- 组件props必须定义类型
- 禁止any类型

2. 组件开发规范
- 职责单一
- 可复用性
- 性能优化
- 错误边界处理

3. 状态管理规范
- 合理划分store
- 避免状态重复
- 遵循不可变性
- 异步操作规范化

四、性能优化

1. 首屏加载优化
- 组件懒加载
- 资源预加载
- 关键CSS内联
- 图片优化

2. 运行时优化
- 虚拟列表
- 防抖节流
- React.memo
- Web Worker

3. 网络优化
- 消息合并
- 消息压缩
- 断线重连
- 状态恢复